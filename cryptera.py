# -*- coding: utf-8 -*-
import logging
import os
import requests
import json
import asyncio
import html
import re
import time
import datetime
import aiosqlite
import openai  # –î–ª—è SambaNova API
from collections import deque
from fuzzywuzzy import fuzz
# from pycoingecko import CoinGeckoAPI  # –£–¥–∞–ª—è–µ–º –∏–º–ø–æ—Ä—Ç CoinGecko

from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup

from aiogram import Bot, Dispatcher, types, F
from aiogram.filters import Command
from aiogram.enums import ParseMode, ChatMemberStatus
from aiogram.client.default import DefaultBotProperties
from aiogram.exceptions import TelegramBadRequest, TelegramAPIError, AiogramError
from aiogram.types import BotCommandScopeDefault, BotCommandScopeChat, \
    InlineKeyboardMarkup, InlineKeyboardButton, CallbackQuery

# --- –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è ---
TELEGRAM_BOT_TOKEN = '8011953984:AAFIxsYrLZ3T97x75WlHHS2WSSr2i-aMqYQ'
OPENROUTER_API_KEY = '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'
COINMARKETCAP_API_KEY = '6737b0a5-22ba-4a88-8dff-3d8974722ace'  # API –∫–ª—é—á CoinMarketCap
SAMBANOVA_API_KEY = 'da3b4da7-4b32-4048-8e4a-c186f2a677ad'  # API –∫–ª—é—á SambaNova
CHANNEL_ID = -1001852429868
CHANNEL_LINK = "https://t.me/criptaEra1"
# –ì—Ä—É–ø–ø–∞ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞ (–¥–æ–±–∞–≤—å—Ç–µ ID –ø–æ—Å–ª–µ —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã)
DISCUSSION_GROUP_ID = -1002502419761  # ID –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è –∫–∞–Ω–∞–ª–∞
BOT_NAME = "–ò–ò-–ê—Å—Å–∏—Å—Ç–µ–Ω—Ç –ö–∞–Ω–∞–ª–∞ '–ö—Ä–∏–ø—Ç–∞-–≠—Ä–∞'"
ADMIN_USER_IDS = [8638330, 7519737387]  # –û—Å–Ω–æ–≤–Ω–æ–π –∞–¥–º–∏–Ω + @wertikoli

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∏ ---
DB_NAME = "bot_database.sqlite"
MESSAGE_LIMIT_PER_MONTH = 10
BAN_DURATION_MINUTES = 30
CONTEXT_MAX_MESSAGES = 6
TOXIC_KEYWORDS = ["–≥–æ–≤–Ω–æ", "–≥–æ–≤–Ω–∏—â–µ", "—Ö–µ—Ä–Ω—è", "–¥–µ—Ä—å–º–æ", "—Ç—É–ø–æ–π –±–æ—Ç"]
RECENT_POSTS_CHECK_COUNT = 50
TOPIC_SIMILARITY_THRESHOLD = 85
PRICE_PLACEHOLDER_REGEX = r"\{{1,2}PRICE:([A-Za-z0-9\-]+)\}{1,2}"

# --- –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ ---
user_context = {}
limit_enabled = True  # –ù–∞—á–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ, –ø–æ—Ç–æ–º –æ–±–Ω–æ–≤–∏—Ç—Å—è –∏–∑ –ë–î
bot_username = None
last_api_call = 0  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞ API –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
min_call_interval = 15  # –ú–∏–Ω–∏–º–∞–ª—å–Ω—ã–π –∏–Ω—Ç–µ—Ä–≤–∞–ª –º–µ–∂–¥—É –≤—ã–∑–æ–≤–∞–º–∏ API –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (–¥–ª—è –∏–∑–±–µ–∂–∞–Ω–∏—è Rate Limit)
crypto_price_cache = {}  # –ö–µ—à –¥–ª—è —Ü–µ–Ω –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç
crypto_cache_time = {}  # –í—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –º–æ–Ω–µ—Ç—ã
PRICE_CACHE_TTL = 3600  # –°—Ä–æ–∫ –∂–∏–∑–Ω–∏ –∫–µ—à–∞ —Ü–µ–Ω –≤ —Å–µ–∫—É–Ω–¥–∞—Ö (1 —á–∞—Å)

# –°—Ç–∞—Ç—É—Å—ã –∏ –º–∞—Ä–∫–µ—Ä—ã
ALLOWED_STATUSES = [ChatMemberStatus.CREATOR, ChatMemberStatus.ADMINISTRATOR, ChatMemberStatus.MEMBER]
COMMON_TOPIC_MARKER = "<<<COMMON_TOPIC_SEARCH_CHANNEL>>>"

# –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
WELCOME_MESSAGE = """–ü—Ä–∏–≤–µ—Ç! üëã –Ø –±–æ—Ç –∫–∞–Ω–∞–ª–∞ –ö—Ä–∏–ø—Ç–∞-–≠—Ä–∞.

–í—ã –º–æ–∂–µ—Ç–µ –∑–∞–¥–∞–≤–∞—Ç—å –º–Ω–µ –≤–æ–ø—Ä–æ—Å—ã –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏ –±–ª–æ–∫—á–µ–π–Ω–µ –ø—Ä—è–º–æ –∑–¥–µ—Å—å –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö, –∏ —è –æ—Ç–≤–µ—á—É –≤–∞–º –±–µ–∑ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π.

–ß—Ç–æ –≤–∞—Å –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç? üöÄ"""

# --- –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–ª—é—á–µ–π –∏ ID ---
if not TELEGRAM_BOT_TOKEN: raise ValueError("–¢–æ–∫–µ–Ω Telegram –±–æ—Ç–∞ –ø—É—Å—Ç–æ–π.")
if not OPENROUTER_API_KEY: raise ValueError("–ö–ª—é—á API OpenRouter –ø—É—Å—Ç–æ–π.")
if not ADMIN_USER_IDS: raise ValueError("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —Ö–æ—Ç—è –±—ã –æ–¥–Ω–æ–≥–æ –∞–¥–º–∏–Ω–∞ –≤ ADMIN_USER_IDS.")

# --- –°–æ—Å—Ç–æ—è–Ω–∏—è –¥–ª—è FSM ---
class PublishPost(StatesGroup):
    waiting_for_topic = State()
    waiting_for_confirmation = State()
    waiting_for_edit_instructions = State()

# --- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è ---
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(name)s - %(message)s')

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞ ---
bot = Bot(token=TELEGRAM_BOT_TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
dp = Dispatcher()

# --- –ë–∞–∑–∞ –î–∞–Ω–Ω—ã—Ö (SQLite) ---
async def db_connect():
    conn = await aiosqlite.connect(DB_NAME)
    await conn.execute('CREATE TABLE IF NOT EXISTS user_limits (user_id INTEGER PRIMARY KEY, month_year TEXT NOT NULL, count INTEGER NOT NULL DEFAULT 0)')
    await conn.execute('CREATE TABLE IF NOT EXISTS temporary_bans (user_id INTEGER PRIMARY KEY, expiry_timestamp INTEGER NOT NULL)')
    await conn.execute('CREATE TABLE IF NOT EXISTS published_posts (id INTEGER PRIMARY KEY AUTOINCREMENT, topic TEXT NOT NULL, publish_timestamp INTEGER NOT NULL)')
    await conn.execute('CREATE TABLE IF NOT EXISTS bot_settings (key TEXT PRIMARY KEY, value TEXT NOT NULL)')
    await conn.commit()
    await conn.close()

async def call_api_with_rate_limit(url, headers, payload, retry_count=2, retry_delay=15):
    """–í—ã–∑—ã–≤–∞–µ—Ç API —Å —É—á–µ—Ç–æ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –Ω–∞ —á–∞—Å—Ç–æ—Ç—É –∑–∞–ø—Ä–æ—Å–æ–≤.
    
    Args:
        url: URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        headers: –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
        payload: –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞
        retry_count: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–≤—Ç–æ—Ä–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫ –ø—Ä–∏ –æ—à–∏–±–∫–µ
        retry_delay: –ó–∞–¥–µ—Ä–∂–∫–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
        
    Returns:
        –û—Ç–≤–µ—Ç –æ—Ç API –∏–ª–∏ None –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ
    """
    global last_api_call
    
    current_time = time.time()
    time_since_last_call = current_time - last_api_call
    
    # –ï—Å–ª–∏ –ø—Ä–æ—à–ª–æ –º–µ–Ω—å—à–µ min_call_interval —Å–µ–∫—É–Ω–¥ —Å –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞, –¥–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É
    if time_since_last_call < min_call_interval:
        wait_time = min_call_interval - time_since_last_call
        logging.info(f"–î–µ–ª–∞–µ–º –∑–∞–¥–µ—Ä–∂–∫—É {wait_time:.1f} —Å–µ–∫—É–Ω–¥ –¥–ª—è —Å–æ–±–ª—é–¥–µ–Ω–∏—è –ª–∏–º–∏—Ç–∞ API...")
        await asyncio.sleep(wait_time)
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –≤—ã–∑–æ–≤–∞
    last_api_call = time.time()
    
    for attempt in range(retry_count + 1):
        try:
            logging.info(f"–í—ã–∑–æ–≤ API (–ø–æ–ø—ã—Ç–∫–∞ {attempt + 1}/{retry_count + 1})...")
            response = requests.post(url, headers=headers, data=json.dumps(payload))
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ rate limit (–∫–æ–¥ 429)
            if response.status_code == 429:
                if attempt < retry_count:
                    actual_delay = retry_delay * (2 ** attempt)  # –≠–∫—Å–ø–æ–Ω–µ–Ω—Ü–∏–∞–ª—å–Ω–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞
                    logging.warning(f"–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ (429). –û–∂–∏–¥–∞–Ω–∏–µ {actual_delay} —Å–µ–∫—É–Ω–¥ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π...")
                    await asyncio.sleep(actual_delay)
                    continue
                else:
                    logging.error("–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫")
                    return None
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥—Ä—É–≥–∏–µ –æ—à–∏–±–∫–∏
            response.raise_for_status()
            
            # –ï—Å–ª–∏ –¥–æ—à–ª–∏ —Å—é–¥–∞, –∑–Ω–∞—á–∏—Ç –æ—Ç–≤–µ—Ç —É—Å–ø–µ—à–Ω—ã–π
            return response
            
        except requests.exceptions.RequestException as e:
            logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ API: {e}")
            if attempt < retry_count:
                actual_delay = retry_delay * (2 ** attempt)
                logging.info(f"–ü–æ–≤—Ç–æ—Ä–Ω–∞—è –ø–æ–ø—ã—Ç–∫–∞ —á–µ—Ä–µ–∑ {actual_delay} —Å–µ–∫—É–Ω–¥...")
                await asyncio.sleep(actual_delay)
            else:
                logging.error("–í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –≤—ã–∑–æ–≤–∞ API –∏—Å—á–µ—Ä–ø–∞–Ω—ã")
                return None
    
    return None  # –í—Å–µ –ø–æ–ø—ã—Ç–∫–∏ –∏—Å—á–µ—Ä–ø–∞–Ω—ã

async def get_user_limit_data(user_id: int):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT month_year, count FROM user_limits WHERE user_id = ?", (user_id,)) as cursor:
            return await cursor.fetchone()

async def update_user_limit(user_id: int, month_year: str, count: int):
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR REPLACE INTO user_limits (user_id, month_year, count) VALUES (?, ?, ?)", (user_id, month_year, count))
        await db.commit()

async def get_bot_setting(key: str, default_value: str = ""):
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –∏–∑ –ë–î. –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç default_value, –µ—Å–ª–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞."""
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT value FROM bot_settings WHERE key = ?", (key,)) as cursor:
            row = await cursor.fetchone()
            if row:
                return row[0]
            return default_value

async def set_bot_setting(key: str, value: str):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –±–æ—Ç–∞ –≤ –ë–î."""
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR REPLACE INTO bot_settings (key, value) VALUES (?, ?)", (key, value))
        await db.commit()
        logging.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ '{key}' —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ –ë–î —Å–æ –∑–Ω–∞—á–µ–Ω–∏–µ–º '{value}'")

async def load_settings():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î –ø—Ä–∏ —Å—Ç–∞—Ä—Ç–µ –±–æ—Ç–∞."""
    global limit_enabled
    # –ó–∞–≥—Ä—É–∂–∞–µ–º limit_enabled
    limit_setting = await get_bot_setting("limit_enabled", "true")
    limit_enabled = limit_setting.lower() == "true"
    logging.info(f"–ó–∞–≥—Ä—É–∂–µ–Ω–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ limit_enabled = {limit_enabled}")
    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∑–∞–≥—Ä—É–∑–∫—É –¥—Ä—É–≥–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ –≤ –±—É–¥—É—â–µ–º

async def get_ban_status(user_id: int):
    async with aiosqlite.connect(DB_NAME) as db:
        async with db.execute("SELECT expiry_timestamp FROM temporary_bans WHERE user_id = ?", (user_id,)) as cursor:
            row = await cursor.fetchone()
            if row:
                current_time = int(time.time())
                if row[0] > current_time: return row[0]
                else:
                    await db.execute("DELETE FROM temporary_bans WHERE user_id = ?", (user_id,))
                    await db.commit()
                    logging.info(f"–°—Ä–æ–∫ –±–∞–Ω–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –∏—Å—Ç–µ–∫.")
                    return None
            return None

async def ban_user(user_id: int, duration_minutes: int):
    expiry_timestamp = int(time.time()) + duration_minutes * 60
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT OR REPLACE INTO temporary_bans (user_id, expiry_timestamp) VALUES (?, ?)", (user_id, expiry_timestamp))
        await db.commit()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω –¥–æ {datetime.datetime.fromtimestamp(expiry_timestamp)}")

async def add_published_post(topic: str):
    timestamp = int(time.time())
    async with aiosqlite.connect(DB_NAME) as db:
        await db.execute("INSERT INTO published_posts (topic, publish_timestamp) VALUES (?, ?)", (topic, timestamp))
        await db.commit()
    logging.info(f"–¢–µ–º–∞ '{topic}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö –ø–æ—Å—Ç–æ–≤.")

async def check_recent_topics(new_topic: str, count: int = RECENT_POSTS_CHECK_COUNT, threshold: int = TOPIC_SIMILARITY_THRESHOLD):
    async with aiosqlite.connect(DB_NAME) as db:
        query = "SELECT topic FROM published_posts ORDER BY publish_timestamp DESC LIMIT ?"
        async with db.execute(query, (count,)) as cursor:
            recent_topics = await cursor.fetchall()
        if not recent_topics: return None
        new_topic_lower = new_topic.lower()
        for (recent_topic,) in recent_topics:
            recent_topic_lower = recent_topic.lower()
            similarity = fuzz.token_sort_ratio(new_topic_lower, recent_topic_lower)
            logging.debug(f"–°—Ä–∞–≤–Ω–µ–Ω–∏–µ: '{new_topic_lower}' vs '{recent_topic_lower}', –°—Ö–æ–∂–µ—Å—Ç—å: {similarity}")
            if similarity >= threshold:
                logging.info(f"–ù–∞–π–¥–µ–Ω–∞ –ø–æ—Ö–æ–∂–∞—è –Ω–µ–¥–∞–≤–Ω—è—è —Ç–µ–º–∞: '{recent_topic}' (–°—Ö–æ–∂–µ—Å—Ç—å: {similarity} >= {threshold})")
                return recent_topic
        return None

async def get_crypto_price(symbol: str) -> str:
    """–ü–æ–ª—É—á–∞–µ—Ç —Ü–µ–Ω—É –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç—ã —Å CoinMarketCap –ø–æ —Å–∏–º–≤–æ–ª—É."""
    symbol_upper = symbol.upper()  # CoinMarketCap –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Å–∏–º–≤–æ–ª—ã –≤ –≤–µ—Ä—Ö–Ω–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–µ
    current_time = time.time()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤ –∫–µ—à–µ –∏ –Ω–µ —É—Å—Ç–∞—Ä–µ–ª–æ –ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ
    if symbol_upper in crypto_price_cache and symbol_upper in crypto_cache_time:
        if current_time - crypto_cache_time[symbol_upper] < PRICE_CACHE_TTL:
            logging.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –∫–µ—à–∏—Ä–æ–≤–∞–Ω–Ω—É—é —Ü–µ–Ω—É –¥–ª—è {symbol_upper}: {crypto_price_cache[symbol_upper]}")
            return crypto_price_cache[symbol_upper]
    
    # –•–∞—Ä–¥–∫–æ–¥–∏–º —Å—Ç–µ–π–±–ª–∫–æ–∏–Ω—ã –¥–ª—è —Å–∫–æ—Ä–æ—Å—Ç–∏
    if symbol_upper in ["USDT", "USDC", "DAI", "BUSD", "TUSD"]:
        price_str = "$1.00"
        crypto_price_cache[symbol_upper] = price_str
        crypto_cache_time[symbol_upper] = current_time
        return price_str
    
    try:
        url = "https://pro-api.coinmarketcap.com/v1/cryptocurrency/quotes/latest"
        
        # –ü–∞—Ä–∞–º–µ—Ç—Ä—ã –∑–∞–ø—Ä–æ—Å–∞
        parameters = {
            "symbol": symbol_upper,  # –ú–æ–∂–Ω–æ –∑–∞–ø—Ä–æ—Å–∏—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
            "convert": "USD"
        }
        
        headers = {
            "Accepts": "application/json",
            "X-CMC_PRO_API_KEY": COINMARKETCAP_API_KEY
        }
        
        # –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, headers=headers, params=parameters)
        data = response.json()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
        if response.status_code == 200 and "data" in data and symbol_upper in data["data"]:
            coin_data = data["data"][symbol_upper]
            price = coin_data["quote"]["USD"]["price"]
            
            logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ü–µ–Ω–∞ –¥–ª—è {symbol_upper}: ${price}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ü–µ–Ω—É –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –µ—ë –≤–µ–ª–∏—á–∏–Ω—ã
            if price < 0.01:
                price_str = f"${price:.6f}"
            elif price < 1:
                price_str = f"${price:.4f}"
            else:
                price_str = f"${price:,.2f}"
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫–µ—à
            crypto_price_cache[symbol_upper] = price_str
            crypto_cache_time[symbol_upper] = current_time
            
            return price_str
        else:
            error_msg = data.get("status", {}).get("error_message", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞")
            logging.warning(f"–û—à–∏–±–∫–∞ API CoinMarketCap –¥–ª—è {symbol_upper}: {error_msg}")
            return f"–¶–µ–Ω–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
            
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Ü–µ–Ω—ã –¥–ª—è {symbol_upper}: {e}")
        return f"–û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã"

async def process_price_placeholders(text: str) -> str:
    processed_text = text
    symbols_found = set()

    for match in re.finditer(PRICE_PLACEHOLDER_REGEX, text):
        symbol = match.group(1).strip()
        placeholder = match.group(0)
        logging.debug(f"[PRICE DEBUG] –ù–∞–π–¥–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä: {placeholder}, –°–∏–º–≤–æ–ª: {symbol}")
        if symbol and symbol not in symbols_found:
            symbols_found.add(symbol)
            logging.debug(f"[PRICE DEBUG] –ó–∞–ø—Ä–æ—Å —Ü–µ–Ω—ã –¥–ª—è —Å–∏–º–≤–æ–ª–∞: {symbol}")
            price_str = await get_crypto_price(symbol)
            logging.debug(f"[PRICE DEBUG] –ü–æ–ª—É—á–µ–Ω–∞ —Å—Ç—Ä–æ–∫–∞ —Ü–µ–Ω—ã –¥–ª—è {symbol}: {price_str}")
            processed_text = processed_text.replace(placeholder, price_str)
            logging.debug(f"[PRICE DEBUG] –¢–µ–∫—Å—Ç –ø–æ—Å–ª–µ –∑–∞–º–µ–Ω—ã {placeholder} –Ω–∞ {price_str}: {processed_text}")
        elif not symbol:
            logging.warning(f"[PRICE DEBUG] –ù–∞–π–¥–µ–Ω –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä —Å –ø—É—Å—Ç—ã–º —Å–∏–º–≤–æ–ª–æ–º: {placeholder}")
        else:
            logging.debug(f"[PRICE DEBUG] –°–∏–º–≤–æ–ª {symbol} —É–∂–µ –æ–±—Ä–∞–±–æ—Ç–∞–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –ø–æ–≤—Ç–æ—Ä–Ω—É—é –∑–∞–º–µ–Ω—É –¥–ª—è {placeholder}")

    logging.debug(f"[PRICE DEBUG] –§–∏–Ω–∞–ª—å–Ω—ã–π —Ç–µ–∫—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤—Å–µ—Ö –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–æ–≤: {processed_text}")
    return processed_text

def fix_markdown(text: str) -> str:
    text = re.sub(r'\*\*\*(.+?)\*\*\*', r'*_\1_*', text)
    text = re.sub(r'___(.+?)___', r'*_\1_*', text)
    text = re.sub(r'\*\*(.+?)\*\*', r'*\1*', text)
    text = re.sub(r'__(.+?)__', r'_\1_', text)
    return text

async def check_subscription(user_id: int) -> bool:
    logging.debug(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user_id={user_id} –Ω–∞ –∫–∞–Ω–∞–ª={CHANNEL_ID}")
    try:
        member = await bot.get_chat_member(chat_id=CHANNEL_ID, user_id=user_id)
        logging.info(f"–°—Ç–∞—Ç—É—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –≤ {CHANNEL_ID}: {member.status}")
        if member.status in ALLOWED_STATUSES:
            logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ü–û–î–ü–ò–°–ê–ù.")
            return True
        else:
            logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ù–ï –ü–û–î–ü–ò–°–ê–ù (—Å—Ç–∞—Ç—É—Å: {member.status}).")
            return False
    except (TelegramBadRequest, TelegramAPIError) as e:
        if "user not found" in str(e).lower() or "member not found" in str(e).lower():
             logging.info(f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user {user_id}: –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∫–∞–Ω–∞–ª–µ {CHANNEL_ID}. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
        elif "chat not found" in str(e).lower():
             logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: –ö–∞–Ω–∞–ª {CHANNEL_ID} –Ω–µ –Ω–∞–π–¥–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ CHANNEL_ID.")
        else:
             logging.warning(f"–û—à–∏–±–∫–∞ API/BadRequest –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user {user_id} –Ω–∞ {CHANNEL_ID}: {e}. –°—á–∏—Ç–∞–µ–º, —á—Ç–æ –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
        return False
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏ –¥–ª—è user {user_id} –Ω–∞ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}", exc_info=True)
        return False

SYSTEM_PROMPT_QA = f"""You are an expert AI assistant specializing exclusively in cryptocurrency and blockchain technology for the channel '{CHANNEL_ID}'.
Answer the user's questions concisely and accurately, focusing ONLY on crypto-related aspects.
IMPORTANT: You must STRICTLY REFUSE to answer ANY questions not directly related to cryptocurrency or blockchain. 
For unrelated topics, politely state that you can only provide information about cryptocurrency and blockchain.
**If you need the current price of a cryptocurrency, use the placeholder `{{PRICE:SYMBOL}}` (e.g., `{{PRICE:BTC}}`, `{{PRICE:ETH}}`). Do not invent prices.**
If the user's question is about a very basic, fundamental, or commonly discussed topic in crypto, append the exact marker '{COMMON_TOPIC_MARKER}' at the VERY END of your response.
Provide only the direct answer, without any extra commentary or meta-tags like <think>. Consider the provided conversation history for context.
Use Markdown formatting with *bold* and _italic_ only. **Do NOT use** `**bold**` or `__italic__`.

IMPORTANT: Always respond in Russian language only, regardless of the language of the question.
NEVER answer questions about general topics, politics, world events, celebrities, or any other non-crypto themes.
"""

SYSTEM_PROMPT_POST = f"""You are an expert AI writer for the crypto channel '{CHANNEL_ID}'.
**Writing Style:** Write in a clear, concise, slightly informal tone. Use relevant emojis sparingly (e.g., üöÄ, üìà, üí°, üí∞). Focus on practical info and key takeaways. Use short paragraphs or bullet points. Use Markdown formatting with *bold* and _italic_ only. **Do NOT use** `**bold**` or `__italic__`. Avoid technical jargon or explain it briefly.
**Pricing:** If you need the current price of a cryptocurrency, use the placeholder `{{PRICE:SYMBOL}}` (e.g., `{{PRICE:BTC}}`, `{{PRICE:ETH}}`). Do not invent prices.
Generate ONLY the post content based on the user's topic, adhering strictly to the style and pricing instructions. No greetings, intros, or conclusions.

CRITICAL: Write ONLY in Russian language. All content must be in Russian, even if the topic is provided in English.
"""

SYSTEM_PROMPT_EDIT = """You are an expert AI editor revising a Telegram post for the crypto channel '{channel_id}'.
You will receive the original topic, the previously generated post text, and the admin's edit instructions.
Revise the *previous post text* according to the admin's instructions.
Maintain the original topic and the channel's writing style (clear, concise, slightly informal, emojis, *bold*/*italic* Markdown only, **no `**bold**` or `__italic__`).
**Pricing:** If you need the current price of a cryptocurrency, use the placeholder `{{PRICE:SYMBOL}}`. Do not invent prices.
Output ONLY the revised post content. No explanations or apologies.

IMPORTANT: Always write in Russian language only. All content must be in Russian, even if the edit instructions are in English.

**Original Topic:**
{topic}

**Previous Post Text:**
{previous_content}

**Admin's Edit Instructions:**
{edit_instructions}

**Revised Post Text:**
"""

def get_confirmation_keyboard() -> InlineKeyboardMarkup:
    buttons = [
        [InlineKeyboardButton(text="‚úÖ –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å", callback_data="publish_post_confirm")],
        [InlineKeyboardButton(text="‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å (AI)", callback_data="publish_post_edit")],
        [InlineKeyboardButton(text="üìù –ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç", callback_data="publish_post_copy")],
        [InlineKeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∞", callback_data="publish_post_cancel")],
    ]
    return InlineKeyboardMarkup(inline_keyboard=buttons)

@dp.message(Command(commands=['start', 'help']))
async def send_welcome(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    user_id = message.from_user.id if message.from_user else 0
    if current_state is not None:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤—ã–∑–≤–∞–ª /start –≤–æ –≤—Ä–µ–º—è —Å–æ—Å—Ç–æ—è–Ω–∏—è {current_state}. –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ.")
        await state.clear()
        await message.reply("–ü—Ä–µ–¥—ã–¥—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.")

    if user_id and user_id in user_context:
        del user_context[user_id]
        logging.info(f"–ö–æ–Ω—Ç–µ–∫—Å—Ç –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id} –æ—á–∏—â–µ–Ω.")

    await message.reply(f"–ü—Ä–∏–≤–µ—Ç! –Ø {BOT_NAME}.\n"
                        f"–î–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ –º–Ω–æ–π –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞: {CHANNEL_LINK}\n"
                        f"–ó–∞–¥–∞–≤–∞–π —Å–≤–æ–π –≤–æ–ø—Ä–æ—Å –ø–æ—Å–ª–µ –ø–æ–¥–ø–∏—Å–∫–∏!")

@dp.message(Command('cancel'), F.state != None)
async def cancel_handler(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª —Å–æ—Å—Ç–æ—è–Ω–∏–µ {current_state}")
    await state.clear()
    await message.reply("–î–µ–π—Å—Ç–≤–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ.", reply_markup=types.ReplyKeyboardRemove())

@dp.message(Command('cancel'), F.state == None)
async def cancel_no_state_handler(message: types.Message):
    logging.debug(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –≤—ã–∑–≤–∞–ª /cancel, –Ω–æ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
    await message.reply("–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –¥–µ–π—Å—Ç–≤–∏–π –¥–ª—è –æ—Ç–º–µ–Ω—ã.")

@dp.message(Command('limiton'))
async def cmd_limit_on(message: types.Message):
    global limit_enabled
    if not message.from_user or message.from_user.id not in ADMIN_USER_IDS: return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    limit_enabled = True
    await set_bot_setting("limit_enabled", "true")
    
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤–∫–ª—é—á–∏–ª –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π.")
    await message.reply("–õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–ö–õ–Æ–ß–ï–ù–´ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")

@dp.message(Command('limitoff'))
async def cmd_limit_off(message: types.Message):
    global limit_enabled
    if not message.from_user or message.from_user.id not in ADMIN_USER_IDS: return
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–ª–∞–≥ –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –ë–î
    limit_enabled = False
    await set_bot_setting("limit_enabled", "false")
    
    logging.info(f"–ê–¥–º–∏–Ω {message.from_user.id} –≤—ã–∫–ª—é—á–∏–ª –ª–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π.")
    await message.reply("–õ–∏–º–∏—Ç—ã —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –í–´–ö–õ–Æ–ß–ï–ù–´ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –ë–î.")

@dp.message(Command(commands=['publish']))
async def cmd_publish_start(message: types.Message, state: FSMContext):
    if not message.from_user or message.from_user.id not in ADMIN_USER_IDS: return

    current_state = await state.get_state()
    if current_state is not None:
        await message.reply(f"–í—ã —É–∂–µ –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ ({current_state}). –í–≤–µ–¥–∏—Ç–µ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã —Å–Ω–∞—á–∞–ª–∞.")
        return

    logging.info(f"–ê–¥–º–∏–Ω—ã {ADMIN_USER_IDS} –∏–Ω–∏—Ü–∏–∏—Ä–æ–≤–∞–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞.")
    await state.set_state(PublishPost.waiting_for_topic)
    await message.reply("–í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –¥–ª—è –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ:")

@dp.message(PublishPost.waiting_for_topic)
async def process_publish_topic(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_topic")
        return

    if not message.from_user or message.from_user.id not in ADMIN_USER_IDS:
        logging.warning(f"–°–æ–æ–±—â–µ–Ω–∏–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_topic –æ—Ç –Ω–µ-–∞–¥–º–∏–Ω–æ–≤ {message.from_user.id}, —Å–±—Ä–æ—Å —Å–æ—Å—Ç–æ—è–Ω–∏—è.")
        await state.clear()
        return

    topic = message.text.strip()
    if not topic:
        await message.reply("–¢–µ–º–∞ –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç–æ–π. –í–≤–µ–¥–∏—Ç–µ —Ç–µ–º—É –∏–ª–∏ /cancel.")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω–∞ —Ç–µ–º–∞ –ø–æ—Å—Ç–∞ –æ—Ç –∞–¥–º–∏–Ω–æ–≤ ({ADMIN_USER_IDS}): '{topic}'")

    similar_topic = await check_recent_topics(topic)
    if similar_topic:
        await message.reply(f"‚ö†Ô∏è *–ü–æ—Ö–æ–∂–∞—è —Ç–µ–º–∞:*\n–ù–µ–¥–∞–≤–Ω–æ –±—ã–ª –ø–æ—Å—Ç: \"{html.escape(similar_topic)}\".\n–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏—é \"{html.escape(topic)}\"?",
                           reply_markup=InlineKeyboardMarkup(inline_keyboard=[
                               [InlineKeyboardButton(text="–î–∞, –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å", callback_data=f"proceed_publish:{topic}")],
                               [InlineKeyboardButton(text="–ù–µ—Ç, –æ—Ç–º–µ–Ω–∏—Ç—å", callback_data="publish_post_cancel")]
                           ]), parse_mode=ParseMode.HTML)
        await state.update_data(pending_topic=topic)
        return

    await generate_and_confirm_post(message, state, topic)

async def generate_and_confirm_post(message_or_callback: types.Message | CallbackQuery, state: FSMContext, topic: str):
    if isinstance(message_or_callback, types.Message):
        chat_id = message_or_callback.chat.id
        reply_func = message_or_callback.reply
        message_to_delete = None
    else:
        chat_id = message_or_callback.message.chat.id
        reply_func = message_or_callback.message.answer
        message_to_delete = message_or_callback.message
        await message_or_callback.answer()

    processing_msg = await bot.send_message(chat_id, f"–ü—Ä–∏–Ω—è—Ç–æ! –ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–æ—Å—Ç –Ω–∞ —Ç–µ–º—É \"{html.escape(topic)}\". –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ–∫–æ—Ç–æ—Ä–æ–µ –≤—Ä–µ–º—è...")
    if message_to_delete:
        try:
            await message_to_delete.delete()
        except TelegramBadRequest:
            logging.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ {message_to_delete.message_id}")

    await bot.send_chat_action(chat_id, "typing")

    try:
        logging.info(f"–í—ã–∑–æ–≤ AI –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –ø–æ —Ç–µ–º–µ: '{topic}'")
        
        messages = [
            {"role": "system", "content": SYSTEM_PROMPT_POST},
            {"role": "user", "content": topic}
        ]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å SambaNova API
        post_content_raw = await call_api_with_fallback(
            messages=messages,
            temperature=0.7,
            top_p=0.9
        )
        
        if post_content_raw is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            await processing_msg.edit_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI-—Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –ø–æ–≤—Ç–æ—Ä–∏—Ç–µ –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –Ω–µ—Å–∫–æ–ª—å–∫–æ –º–∏–Ω—É—Ç.")
            await state.clear()
            return
            
        logging.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç AI –¥–ª—è –ø–æ—Å—Ç–∞: {post_content_raw}")

        post_content_fixed_md = fix_markdown(post_content_raw)
        post_content_processed = await process_price_placeholders(post_content_fixed_md)
        post_content_final = re.sub(r"^\s*<think>.*?</think>\s*", "", post_content_processed, flags=re.DOTALL | re.IGNORECASE).strip()
        logging.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (—Ü–µ–Ω—ã/MD –æ–±—Ä–∞–±–æ—Ç–∞–Ω—ã): {post_content_final}")

        if not post_content_final:
            logging.error(f"–ö–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –¥–ª—è —Ç–µ–º—ã '{topic}' –æ–∫–∞–∑–∞–ª—Å—è –ø—É—Å—Ç—ã–º.")
            await processing_msg.edit_text("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç. –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç. /cancel")
            await state.clear()
            return

        await state.update_data(topic=topic, generated_content=post_content_final)
        await state.set_state(PublishPost.waiting_for_confirmation)
        await processing_msg.delete()

        preview_text = post_content_final

        try:
            await bot.send_message(
                chat_id,
                f"*–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É \"{topic.replace('*','\\*').replace('_','\\_').replace('`','\\`')}\":*\n\n"
                f"{preview_text}\n\n"
                f"--------------------\n"
                f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                reply_markup=get_confirmation_keyboard(),
                parse_mode=ParseMode.MARKDOWN
            )
        except TelegramBadRequest as e:
            if "can't parse entities" in str(e):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–º –ø–æ—Å—Ç–µ –¥–ª—è –ø—Ä–µ–≤—å—é: {e}\n–¢–µ–∫—Å—Ç: {preview_text}")
                 await bot.send_message(
                    chat_id,
                    f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É \"{html.escape(topic)}\":</b>\n\n"
                    f"{html.escape(post_content_final)}\n\n"
                    f"--------------------\n"
                    f"<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π Markdown.\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_confirmation_keyboard(),
                    parse_mode=ParseMode.HTML
                 )
            else:
                 raise e

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏/HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        await processing_msg.edit_text(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}. /cancel")
        await state.clear()
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ generate_and_confirm_post: {e}", exc_info=True)
        await processing_msg.edit_text("–ù–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞. /cancel")
        await state.clear()

@dp.callback_query(PublishPost.waiting_for_confirmation, F.data.startswith("publish_post_"))
async def handle_confirmation_callback(callback: CallbackQuery, state: FSMContext):
    action = callback.data.split("_")[-1]
    message = callback.message

    await callback.answer()

    if action == "cancel":
        logging.info(f"–ê–¥–º–∏–Ω—ã {ADMIN_USER_IDS} –æ—Ç–º–µ–Ω–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é.")
        await state.clear()
        await message.edit_text("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
        return

    data = await state.get_data()
    topic = data.get("topic")
    post_content = data.get("generated_content")

    if not topic or not post_content:
        logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ –≤ FSM –ø—Ä–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–∏/—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏/–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏.")
        await message.edit_text("–û—à–∏–±–∫–∞: –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /publish.")
        await state.clear()
        return

    if action == "edit":
        logging.info(f"–ê–¥–º–∏–Ω—ã {ADMIN_USER_IDS} –∑–∞–ø—Ä–æ—Å–∏–ª–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ—Å—Ç–∞ '{topic}'.")
        await state.set_state(PublishPost.waiting_for_edit_instructions)
        await message.edit_text("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à–∏ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –ø–æ—Å—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: '—Å–¥–µ–ª–∞–π —Ç–æ–Ω –±–æ–ª–µ–µ —Ñ–æ—Ä–º–∞–ª—å–Ω—ã–º', '—É–±–µ—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–π –∞–±–∑–∞—Ü', '–¥–æ–±–∞–≤—å –ø—Ä–æ —Ä–∏—Å–∫–∏ {{PRICE:SOL}}'). –ò–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
        return

    if action == "copy":
        logging.info(f"–ê–¥–º–∏–Ω—ã {ADMIN_USER_IDS} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–ª–∏ —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ '{topic}'.")
        await state.clear()
        await message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–∏—Å—Ç—ã–π —Ç–µ–∫—Å—Ç –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è –≤ –≤–∏–¥–µ –∫–æ–¥–∞, —á—Ç–æ–±—ã Markdown –Ω–µ —Å–ª–æ–º–∞–ª—Å—è
        try:
             await message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n`{post_content}`", parse_mode=ParseMode.MARKDOWN)
             await message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—ã—à–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.")
        except TelegramBadRequest as e:
             logging.warning(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (Markdown): {e}. –û—Ç–ø—Ä–∞–≤–∫–∞ –∫–∞–∫ –ø—Ä–æ—Å—Ç–æ–π —Ç–µ–∫—Å—Ç.")
             await message.answer(f"–¢–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è:\n\n{post_content}") # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ –µ—Å—Ç—å
             await message.answer("–ü—É–±–ª–∏–∫–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞. –í—ã –º–æ–∂–µ—Ç–µ —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ç–µ–∫—Å—Ç –≤—ã—à–µ –∏ –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤—Ä—É—á–Ω—É—é.")
        return
    # --- >>> –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ <<< ---

    if action == "confirm":
        logging.info(f"–ê–¥–º–∏–Ω—ã {ADMIN_USER_IDS} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—é –ø–æ—Å—Ç–∞ '{topic}'.")
        # –ü—É–±–ª–∏–∫–∞—Ü–∏—è –≤ –∫–∞–Ω–∞–ª
        try:
            logging.info(f"–ü–æ–ø—ã—Ç–∫–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ '{topic}' –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}...")
            # --- >>> –ò—Å–ø—Ä–∞–≤–ª—è–µ–º Markdown –∏ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ü–µ–Ω—ã –ü–ï–†–ï–î –ø—É–±–ª–∏–∫–∞—Ü–∏–µ–π <<< ---
            # –û–±—Ä–∞–±–æ—Ç–∫–∞ —É–∂–µ –±—ã–ª–∞ —Å–¥–µ–ª–∞–Ω–∞ –ø–µ—Ä–µ–¥ –ø–æ–∫–∞–∑–æ–º –ø—Ä–µ–≤—å—é, –ø–æ–≤—Ç–æ—Ä—è—Ç—å –Ω–µ –Ω—É–∂–Ω–æ,
            # –∏—Å–ø–æ–ª—å–∑—É–µ–º post_content –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è state.
            final_content_to_publish = post_content
            # --- >>> –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ <<< ---

            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å ParseMode.MARKDOWN
            await bot.send_message(chat_id=CHANNEL_ID, text=final_content_to_publish, parse_mode=ParseMode.MARKDOWN)
            logging.info(f"–ü–æ—Å—Ç –Ω–∞ —Ç–µ–º—É '{topic}' —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {CHANNEL_ID}")
            await add_published_post(topic) # –î–æ–±–∞–≤–ª—è–µ–º –≤ –ë–î –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–Ω—ã—Ö
            await message.edit_text(f"‚úÖ –ü–æ—Å—Ç \"{html.escape(topic)}\" –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω –≤ {CHANNEL_LINK}!")

        except TelegramBadRequest as e:
             if "can't parse entities" in str(e):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –ø—Ä–∏ –ü–£–ë–õ–ò–ö–ê–¶–ò–ò –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}\n–¢–µ–∫—Å—Ç: {final_content_to_publish}")
                 await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –û—à–∏–±–∫–∞ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Markdown.\n–ü–æ–ø—Ä–æ–±—É–π—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å –ø–æ—Å—Ç –∏–ª–∏ /cancel.")
                 await message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–≤—å—é
             else:
                 logging.error(f"–û—à–∏–±–∫–∞ API (BadRequest) –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}", exc_info=True)
                 await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –û—à–∏–±–∫–∞ API: {e}")
                 await message.edit_reply_markup(reply_markup=None)
        except TelegramAPIError as e:
             logging.error(f"–û—à–∏–±–∫–∞ API –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}", exc_info=True)
             global bot_username
             bot_mention = f"@{bot_username}" if bot_username else "–±–æ—Ç"
             await message.answer(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç. –û—à–∏–±–∫–∞ API: {e}\n–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ {bot_mention} —è–≤–ª—è–µ—Ç—Å—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –≤ {CHANNEL_ID} —Å –ø—Ä–∞–≤–æ–º –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ —Å–æ–æ–±—â–µ–Ω–∏–π.")
             await message.edit_reply_markup(reply_markup=None) # –£–±–∏—Ä–∞–µ–º –∫–Ω–æ–ø–∫–∏ —É –ø—Ä–µ–≤—å—é
        except Exception as e:
             logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª {CHANNEL_ID}: {e}", exc_info=True)
             await message.answer("‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞.")
             await message.edit_reply_markup(reply_markup=None)

        await state.clear()

@dp.message(PublishPost.waiting_for_edit_instructions)
async def handle_edit_instructions(message: types.Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å–æ–¥–µ—Ä–∂–∏—Ç —Ç–µ–∫—Å—Ç
    if not message.text:
        logging.warning(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±–µ–∑ —Ç–µ–∫—Å—Ç–∞ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ waiting_for_edit_instructions")
        return
        
    if not message.from_user or message.from_user.id not in ADMIN_USER_IDS: return

    edit_instructions = message.text.strip()
    if not edit_instructions:
        await message.reply("–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –Ω–µ –º–æ–≥—É—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º–∏. –û–ø–∏—à–∏—Ç–µ, —á—Ç–æ –Ω—É–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å, –∏–ª–∏ /cancel.")
        return

    logging.info(f"–ü–æ–ª—É—á–µ–Ω—ã –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—é –æ—Ç –∞–¥–º–∏–Ω–æ–≤: '{edit_instructions}'")
    processing_msg = await message.reply("–ü—Ä–∏–Ω—è—Ç–æ! –í–Ω–æ—à—É –ø—Ä–∞–≤–∫–∏ –≤ –ø–æ—Å—Ç...")
    await bot.send_chat_action(message.chat.id, "typing")

    try:
        data = await state.get_data()
        topic = data.get("topic")
        previous_content = data.get("generated_content")

        if not topic or not previous_content:
            logging.error("–ù–µ –Ω–∞–π–¥–µ–Ω—ã –¥–∞–Ω–Ω—ã–µ FSM –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏.")
            await processing_msg.edit_text("–û—à–∏–±–∫–∞: –¥–∞–Ω–Ω—ã–µ –ø–æ—Ç–µ—Ä—è–Ω—ã. –ù–∞—á–Ω–∏—Ç–µ –∑–∞–Ω–æ–≤–æ —Å /publish.")
            await state.clear()
            return

        # --- >>> –ò–ó–ú–ï–ù–ï–ù–û: –î–æ–±–∞–≤–ª–µ–Ω channel_id –≤ format <<< ---
        edit_prompt = SYSTEM_PROMPT_EDIT.format(
            channel_id=CHANNEL_ID,
            topic=topic,
            previous_content=previous_content,
            edit_instructions=edit_instructions
        )

        logging.info(f"–í—ã–∑–æ–≤ AI –¥–ª—è —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –ø–æ—Å—Ç–∞.")
        
        messages = [
            # –ü—Ä–∏–º–µ—á–∞–Ω–∏–µ: –°–∏—Å—Ç–µ–º–Ω—ã–π –ø—Ä–æ–º–ø—Ç —É–∂–µ –≤–∫–ª—é—á–µ–Ω –≤ edit_prompt
            {"role": "user", "content": edit_prompt}
        ]
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å SambaNova API
        edited_content_raw = await call_api_with_fallback(
            messages=messages,
            temperature=0.5,
            top_p=0.9
        )
        
        if edited_content_raw is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            await processing_msg.edit_text("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI-—Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –ø–æ–∑–∂–µ –∏–ª–∏ /cancel –¥–ª—è –æ—Ç–º–µ–Ω—ã.")
            return
            
        logging.info(f"–°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç AI –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {edited_content_raw}")

        # --- >>> –û–±—Ä–∞–±–æ—Ç–∫–∞ Markdown –∏ —Ü–µ–Ω –ü–û–°–õ–ï —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è <<< ---
        edited_content_fixed_md = fix_markdown(edited_content_raw)
        edited_content_processed = await process_price_placeholders(edited_content_fixed_md)
        edited_content_final = re.sub(r"^\s*<think>.*?</think>\s*", "", edited_content_processed, flags=re.DOTALL | re.IGNORECASE).strip()
        logging.info(f"–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ (—Ü–µ–Ω—ã/MD): {edited_content_final}")
        # --- >>> –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ <<< ---

        if not edited_content_final:
            logging.error("–û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç –ø–æ—Å—Ç–∞ –ø—É—Å—Ç.")
            await processing_msg.edit_text("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç –ø–æ—Å–ª–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è. –ü–æ–∫–∞–∑—ã–≤–∞—é –ø—Ä–µ–¥—ã–¥—É—â—É—é –≤–µ—Ä—Å–∏—é.")
            await state.set_state(PublishPost.waiting_for_confirmation)
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ä—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
            try:
                await bot.send_message(message.chat.id, f"*–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É \"{topic.replace('*','\\*').replace('_','\\_').replace('`','\\`')}\":*\n\n{previous_content}\n\n-----\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_confirmation_keyboard(), parse_mode=ParseMode.MARKDOWN)
            except TelegramBadRequest as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –ø—Ä–∏ –ø–æ–∫–∞–∑–µ –°–¢–ê–†–û–ì–û –∫–æ–Ω—Ç–µ–Ω—Ç–∞ –ø–æ—Å–ª–µ –Ω–µ—É–¥–∞—á–Ω–æ–≥–æ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
                await bot.send_message(message.chat.id, f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ –Ω–∞ —Ç–µ–º—É \"{html.escape(topic)}\":</b>\n\n{html.escape(previous_content)}\n\n-----\n<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç—Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞—Ç—å. –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_confirmation_keyboard(), parse_mode=ParseMode.HTML)
            return

        await state.update_data(generated_content=edited_content_final) # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–Ω—Ç–µ–Ω—Ç –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏
        await state.set_state(PublishPost.waiting_for_confirmation)
        logging.info("–í–æ–∑–≤—Ä–∞—â–∞–µ–º—Å—è –∫ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—é —Å –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã–º –ø–æ—Å—Ç–æ–º.")
        await processing_msg.delete()

        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–æ–≤—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
        try:
            await bot.send_message(message.chat.id, f"*–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ (–ø–æ—Å–ª–µ —Ä–µ–¥.):*\n\n{edited_content_final}\n\n-----\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_confirmation_keyboard(), parse_mode=ParseMode.MARKDOWN)
        except TelegramBadRequest as e:
             if "can't parse entities" in str(e):
                 logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –≤ –û–¢–†–ï–î–ê–ö–¢–ò–†–û–í–ê–ù–ù–û–ú –ø–æ—Å—Ç–µ –¥–ª—è –ø—Ä–µ–≤—å—é: {e}\n–¢–µ–∫—Å—Ç: {edited_content_final}")
                 await bot.send_message(
                    message.chat.id,
                    f"<b>–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä –ø–æ—Å—Ç–∞ (–ø–æ—Å–ª–µ —Ä–µ–¥.):</b>\n\n"
                    f"{html.escape(edited_content_final)}\n\n" # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∫ HTML escape
                    f"--------------------\n"
                    f"<b>–û—à–∏–±–∫–∞:</b> –ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–æ–±—Ä–∞–∑–∏—Ç—å —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ. –ü–æ—Å—Ç —Å–æ–¥–µ—Ä–∂–∏—Ç –Ω–µ–≤–µ—Ä–Ω—ã–π Markdown.\n"
                    f"–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
                    reply_markup=get_confirmation_keyboard(),
                    parse_mode=ParseMode.HTML
                 )
             else:
                 raise e # –ü–µ—Ä–µ–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ Telegram

    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏/HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        await processing_msg.edit_text(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ /cancel.")
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_edit_instructions: {e}", exc_info=True)
        await processing_msg.edit_text("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ /cancel.")
        await state.clear()


@dp.callback_query(F.data.startswith("proceed_publish:"))
async def handle_proceed_publish(callback: CallbackQuery, state: FSMContext):
    # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–º—É –∏–∑ callback_data
    try:
        topic = callback.data.split(":", 1)[1]
    except IndexError:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–≤–ª–µ—á—å —Ç–µ–º—É –∏–∑ callback_data: {callback.data}")
        await callback.answer("–û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–∞.", show_alert=True)
        await state.clear()
        return

    logging.info(f"–ê–¥–º–∏–Ω—ã {ADMIN_USER_IDS} —Ä–µ—à–∏–ª–∏ –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å –ø—É–±–ª–∏–∫–∞—Ü–∏—é –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ –æ –ø–æ–≤—Ç–æ—Ä–µ —Ç–µ–º—ã '{topic}'.")
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º generate_and_confirm_post, –ø–µ—Ä–µ–¥–∞–≤–∞—è callback –∏ –∏–∑–≤–ª–µ—á–µ–Ω–Ω—É—é —Ç–µ–º—É
    await generate_and_confirm_post(callback, state, topic)


# –ü–µ—Ä–µ–º–µ—â–∞—é —Ñ—É–Ω–∫—Ü–∏—é call_api_with_fallback —Å –ø–æ–∑–∏—Ü–∏–∏ 1003 –ø–µ—Ä–µ–¥ —Ñ—É–Ω–∫—Ü–∏—é handle_text

async def call_api_with_fallback(messages, temperature=0.6, top_p=0.9):
    """–í—ã–∑—ã–≤–∞–µ—Ç API SambaNova –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –æ—Ç–≤–µ—Ç–∞ –æ—Ç –º–æ–¥–µ–ª–∏ DeepSeek.
    
    Args:
        messages: –°–ø–∏—Å–æ–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ API
        temperature: –ü–∞—Ä–∞–º–µ—Ç—Ä —Ç–µ–º–ø–µ—Ä–∞—Ç—É—Ä—ã –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        top_p: –ü–∞—Ä–∞–º–µ—Ç—Ä top_p –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        
    Returns:
        –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–ª–∏ None –ø—Ä–∏ –Ω–µ—É–¥–∞—á–µ API
    """
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–æ–ª—å–∫–æ SambaNova API —Å –º–æ–¥–µ–ª—å—é DeepSeek
    logging.info("–ò—Å–ø–æ–ª—å–∑—É–µ–º SambaNova API —Å –º–æ–¥–µ–ª—å—é DeepSeek...")
    try:
        sambanova_client = openai.OpenAI(
            api_key=SAMBANOVA_API_KEY,
            base_url="https://api.sambanova.ai/v1"
        )
        
        response = sambanova_client.chat.completions.create(
            model="DeepSeek-R1",
            messages=messages,
            temperature=temperature,
            top_p=top_p
        )
        
        content = response.choices[0].message.content
        logging.info("–£—Å–ø–µ—à–Ω–æ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç SambaNova API")
        return content
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ SambaNova API: {e}")
        return None

@dp.message(F.text)
async def handle_text(message: types.Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        logging.warning(f"handle_text –≤—ã–∑–≤–∞–Ω —Å –∞–∫—Ç–∏–≤–Ω—ã–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ–º {current_state} –¥–ª—è user {message.from_user.id}. –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º.")
        # –ú–æ–∂–Ω–æ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é, —á—Ç–æ –Ω—É–∂–Ω–æ —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç—å/–æ—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ
        # await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–µ—Ä—à–∏—Ç–µ –∏–ª–∏ –æ—Ç–º–µ–Ω–∏—Ç–µ (/cancel) —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ.")
        return

    if not message.text or not message.from_user: return

    user_id = message.from_user.id
    user_text = message.text.strip()
    username = message.from_user.username or f"id{user_id}"
    logging.info(f"–ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} ('{username}'): '{user_text}'")

    # –ü–†–û–í–ï–†–ö–ê –ë–ê–ù–ê
    ban_expiry = await get_ban_status(user_id)
    if ban_expiry:
        remaining_seconds = ban_expiry - int(time.time())
        remaining_minutes = (remaining_seconds + 59) // 60
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–±–∞–Ω–µ–Ω. –û—Å—Ç–∞–ª–æ—Å—å –º–∏–Ω—É—Ç: {remaining_minutes}")
        await message.reply(f"–í—ã –≤—Ä–µ–º–µ–Ω–Ω–æ –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω—ã. –û—Å—Ç–∞–ª–æ—Å—å: ~{remaining_minutes} –º–∏–Ω.")
        return

    # –ü–†–û–í–ï–†–ö–ê –¶–ï–ù–ó–£–†–´
    lower_text = user_text.lower()
    if any(keyword in lower_text for keyword in TOXIC_KEYWORDS):
        logging.warning(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Ç–æ–∫—Å–∏—á–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: '{user_text}'")
        await ban_user(user_id, BAN_DURATION_MINUTES)
        await message.reply(f"–û–±—â–µ–Ω–∏–µ –≤ —Ç–∞–∫–æ–º —Ç–æ–Ω–µ –Ω–µ–¥–æ–ø—É—Å—Ç–∏–º–æ. –ë–∞–Ω –Ω–∞ {BAN_DURATION_MINUTES} –º–∏–Ω—É—Ç.")
        return

    # –ü–†–û–í–ï–†–ö–ê –õ–ò–ú–ò–¢–ê
    message_count_before_ai = 0
    current_month_year = ""
    can_proceed = True
    if limit_enabled and user_id not in ADMIN_USER_IDS:
        current_month_year = datetime.datetime.now().strftime("%Y-%m")
        limit_data = await get_user_limit_data(user_id)
        message_count = 0; stored_month_year = None
        if limit_data: stored_month_year, message_count = limit_data

        if stored_month_year != current_month_year:
            logging.info(f"–ù–æ–≤—ã–π –º–µ—Å—è—Ü ({current_month_year}) –¥–ª—è {user_id}. –°–±—Ä–æ—Å –ª–∏–º–∏—Ç–∞.")
            # –ù–µ –æ–±–Ω–æ–≤–ª—è–µ–º —Å—Ä–∞–∑—É, –æ–±–Ω–æ–≤–∏–º –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–≥–æ –æ—Ç–≤–µ—Ç–∞ AI
            message_count_before_ai = 0
        else:
            if message_count >= MESSAGE_LIMIT_PER_MONTH:
                logging.info(f"{user_id} –¥–æ—Å—Ç–∏–≥ –ª–∏–º–∏—Ç–∞ ({message_count}/{MESSAGE_LIMIT_PER_MONTH}) –≤ {current_month_year}.")
                # –ü–æ–∫–∞ –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ, —Å–¥–µ–ª–∞–µ–º —ç—Ç–æ –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏
                can_proceed = False
            else:
                message_count_before_ai = message_count

    # –ü–†–û–í–ï–†–ö–ê –ü–û–î–ü–ò–°–ö–ò
    is_subscribed = await check_subscription(user_id)
    if not is_subscribed:
        logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –Ω–µ –ø–æ–¥–ø–∏—Å–∞–Ω.")
        await message.reply(f"–î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –±—ã—Ç—å –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–º –∫–∞–Ω–∞–ª–∞: {CHANNEL_LINK}")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–∞ (—Ç–µ–ø–µ—Ä—å –ø–æ—Å–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–æ–¥–ø–∏—Å–∫–∏)
    if not can_proceed:
        # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø–æ–¥–ø–∏—Å–∞–Ω, –Ω–æ –ª–∏–º–∏—Ç –∏—Å—á–µ—Ä–ø–∞–Ω
        limit_data = await get_user_limit_data(user_id) # –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω–æ–µ –∑–Ω–∞—á–µ–Ω–∏–µ
        message_count = limit_data[1] if limit_data else MESSAGE_LIMIT_PER_MONTH
        sub_msg = (f"–í—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ —Å–≤–æ–π –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π –Ω–∞ —ç—Ç–æ—Ç –º–µ—Å—è—Ü ({message_count}/{MESSAGE_LIMIT_PER_MONTH}).\n"
                   f"–ù–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ —Å–ª–µ–¥—É—é—â–µ–º –º–µ—Å—è—Ü–µ.\n"
                   f"–í—ã –º–æ–∂–µ—Ç–µ –æ–±—Å—É–¥–∏—Ç—å –∏–Ω—Ç–µ—Ä–µ—Å—É—é—â–∏–µ –≤–∞—Å —Ç–µ–º—ã –≤ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö –∫–∞–Ω–∞–ª–∞: {CHANNEL_LINK}")
                   # f"–î–ª—è —Å–Ω—è—Ç–∏—è –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ –≤–∞—Ä–∏–∞–Ω—Ç –ø–æ–¥–ø–∏—Å–∫–∏ [–ò–Ω—Ñ–æ - –ó–ê–ì–õ–£–®–ö–ê]." # –°—Ç—Ä–æ–∫–∞ –ø—Ä–æ –ø–æ–¥–ø–∏—Å–∫—É
        await message.reply(sub_msg)
        return

    # –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–π–¥–µ–Ω—ã
    logging.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –ø–æ–¥–ø–∏—Å–∞–Ω –∏ –ª–∏–º–∏—Ç –Ω–µ –ø—Ä–µ–≤—ã—à–µ–Ω. –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞...")
    await bot.send_chat_action(message.chat.id, "typing")

    # –ö–û–ù–¢–ï–ö–°–¢
    if user_id not in user_context:
        user_context[user_id] = deque(maxlen=CONTEXT_MAX_MESSAGES)
    user_context[user_id].append({"role": "user", "content": user_text})
    messages_for_api = [{"role": "system", "content": SYSTEM_PROMPT_QA}] + list(user_context[user_id])

    try:
        # –í–´–ó–û–í AI —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º SambaNova API
        ai_response_raw = await call_api_with_fallback(
            messages=messages_for_api,
            temperature=0.6,
            top_p=0.9
        )
        
        if ai_response_raw is None:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç
            await message.reply("–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç AI-—Å–µ—Ä–≤–∏—Å –ø–µ—Ä–µ–≥—Ä—É–∂–µ–Ω. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            if user_id in user_context and user_context[user_id] and user_context[user_id][-1]["role"] == "user":
                user_context[user_id].pop()
            return
        
        logging.info(f"–û—Ç–≤–µ—Ç AI (QA) –¥–ª—è {user_id}: {ai_response_raw}")
        logging.debug(f"[PRICE DEBUG] –°—ã—Ä–æ–π –æ—Ç–≤–µ—Ç AI –ø–µ—Ä–µ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–æ–π —Ü–µ–Ω: {ai_response_raw}") # <-- DEBUG LOG

        # --- >>> –û–±—Ä–∞–±–æ—Ç–∫–∞ Markdown –∏ —Ü–µ–Ω –≤ QA –æ—Ç–≤–µ—Ç–∞—Ö <<< ---
        ai_response_fixed_md = fix_markdown(ai_response_raw)
        ai_response_processed = await process_price_placeholders(ai_response_fixed_md)
        ai_response = re.sub(r"^\s*<think>.*?</think>\s*", "", ai_response_processed, flags=re.DOTALL | re.IGNORECASE).strip()
        # --- >>> –ö–æ–Ω–µ—Ü –æ–±—Ä–∞–±–æ—Ç–∫–∏ <<< ---

        # –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
        if ai_response:
            user_context[user_id].append({"role": "assistant", "content": ai_response})
        else:
            # –ï—Å–ª–∏ –æ—Ç–≤–µ—Ç –ø—É—Å—Ç–æ–π, —É–±–∏—Ä–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–π –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
            user_context[user_id].pop()
            logging.warning("AI –≤–µ—Ä–Ω—É–ª –ø—É—Å—Ç–æ–π –æ—Ç–≤–µ—Ç, –∑–∞–ø—Ä–æ—Å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–¥–∞–ª–µ–Ω –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞.")

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞
        if ai_response.endswith(COMMON_TOPIC_MARKER):
             logging.info(f"AI –ø–æ–º–µ—Ç–∏–ª —Ç–µ–º—É '{user_text}' –∫–∞–∫ –æ–±—â—É—é.")
             actual_answer = ai_response[:-len(COMMON_TOPIC_MARKER)].strip()
             reply_text = (f"{actual_answer}\n\n"
                           f"üí° _–ü–æ—Ö–æ–∂–µ, —ç—Ç–æ —á–∞—Å—Ç–æ –æ–±—Å—É–∂–¥–∞–µ–º–∞—è —Ç–µ–º–∞. –û—Ç–≤–µ—Ç —Ç–∞–∫–∂–µ –º–æ–∂–Ω–æ –ø–æ–∏—Å–∫–∞—Ç—å –≤ –∫–∞–Ω–∞–ª–µ "
                           f"–∏–ª–∏ –µ–≥–æ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è—Ö: {CHANNEL_LINK} (–∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–∏—Å–∫)._")

             # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Å–Ω–æ–≤–Ω–æ–π –æ—Ç–≤–µ—Ç
             try:
                 await message.answer(reply_text, parse_mode=ParseMode.MARKDOWN)
                 # –£–í–ï–õ–ò–ß–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                 if limit_enabled and user_id not in ADMIN_USER_IDS:
                     new_count = message_count_before_ai + 1
                     await update_user_limit(user_id, current_month_year, new_count)
                     logging.info(f"–°—á–µ—Ç—á–∏–∫ {user_id} -> {new_count}/{MESSAGE_LIMIT_PER_MONTH} –≤ {current_month_year}.")

             except (TelegramBadRequest, AiogramError) as e:
                 if "can't parse entities" in str(e):
                     logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –æ—Ç AI (common topic): {e}. –û—Ç–≤–µ—Ç:\n{reply_text}")
                     await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                     # –£–±–∏—Ä–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –∏–∑ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞
                     if user_context[user_id] and user_context[user_id][-1]["role"] == "assistant": user_context[user_id].pop()
                 else:
                     raise e # –ü–µ—Ä–µ–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ Telegram

        else:
            if not ai_response:
                 logging.error("–û—Ç–≤–µ—Ç AI –ø—É—Å—Ç –ø–æ—Å–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏.")
                 await message.reply("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ—Ç–≤–µ—Ç –æ—Ç AI.")
            else:
                 # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å Markdown
                 try:
                     await message.answer(ai_response, parse_mode=ParseMode.MARKDOWN)
                     # –£–í–ï–õ–ò–ß–ï–ù–ò–ï –°–ß–ï–¢–ß–ò–ö–ê –ø–æ—Å–ª–µ —É—Å–ø–µ—à–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏
                     if limit_enabled and user_id not in ADMIN_USER_IDS:
                         new_count = message_count_before_ai + 1
                         await update_user_limit(user_id, current_month_year, new_count)
                         logging.info(f"–°—á–µ—Ç—á–∏–∫ {user_id} -> {new_count}/{MESSAGE_LIMIT_PER_MONTH} –≤ {current_month_year}.")

                 except (TelegramBadRequest, AiogramError) as e:
                     if "can't parse entities" in str(e):
                         logging.error(f"–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ Markdown –æ—Ç AI: {e}. –û—Ç–≤–µ—Ç:\n{ai_response}")
                         await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, AI –≤–µ—Ä–Ω—É–ª –æ—Ç–≤–µ—Ç –≤ –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–º —Ñ–æ—Ä–º–∞—Ç–µ. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑.")
                         # –£–±–∏—Ä–∞–µ–º –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
                         if user_context[user_id] and user_context[user_id][-1]["role"] == "assistant": user_context[user_id].pop()
                     else:
                         raise e # –ü–µ—Ä–µ–±—Ä–æ—Å –¥—Ä—É–≥–∏—Ö –æ—à–∏–±–æ–∫ Telegram


    except requests.exceptions.RequestException as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–µ—Ç–∏/HTTP –ø—Ä–∏ –æ–±—Ä–∞—â–µ–Ω–∏–∏ –∫ AI: {e}")
        await message.reply(f"–í –¥–∞–Ω–Ω—ã–π –º–æ–º–µ–Ω—Ç –Ω–∞–±–ª—é–¥–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–æ—Å—Ç—É–ø–æ–º –∫ AI (—Å–µ—Ç—å). –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        if user_id in user_context and user_context[user_id] and user_context[user_id][-1]["role"] == "user": user_context[user_id].pop()
    except Exception as e:
        logging.error(f"–ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –≤ handle_text: {e}", exc_info=True)
        await message.reply(f"–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
        if user_id in user_context and user_context[user_id] and user_context[user_id][-1]["role"] == "user": user_context[user_id].pop()


async def on_new_channel_post(client, message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –∫–∞–Ω–∞–ª–∞
        if message.chat.type == "channel":
            # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–æ–¥ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ
            try:
                await client.send_message(
                    chat_id=CHANNEL_ID,
                    text=WELCOME_MESSAGE,
                    reply_to_message_id=message.message_id if hasattr(message, 'message_id') else message.id
                )
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–π –ø–æ–¥ –ø–æ—Å—Ç–æ–º {message.message_id if hasattr(message, 'message_id') else message.id} –≤ –∫–∞–Ω–∞–ª–µ")
            except Exception as e:
                logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏—è –ø–æ–¥ –ø–æ—Å—Ç–æ–º –≤ –∫–∞–Ω–∞–ª–µ: {e}")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è
            if DISCUSSION_GROUP_ID:
                try:
                    await client.send_message(
                        chat_id=DISCUSSION_GROUP_ID,
                        text=WELCOME_MESSAGE
                    )
                    logging.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è –¥–ª—è –ø–æ—Å—Ç–∞ {message.message_id if hasattr(message, 'message_id') else message.id}")
                except Exception as e:
                    logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤ –≥—Ä—É–ø–ø—É –æ–±—Å—É–∂–¥–µ–Ω–∏—è: {e}")
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –Ω–æ–≤–æ–≥–æ –ø–æ—Å—Ç–∞ –≤ –∫–∞–Ω–∞–ª–µ: {e}")

# --- –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ ---
async def main():
    global bot_username
    await db_connect()
    logging.info("–ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥–∫–ª—é—á–µ–Ω–∞ –∏ —Ç–∞–±–ª–∏—Ü—ã –ø—Ä–æ–≤–µ—Ä–µ–Ω—ã.")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ –ë–î
    await load_settings()

    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    try:
        me = await bot.get_me()
        bot_username = me.username
        logging.info(f"–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –∫–∞–∫ @{bot_username}")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ–±–µ: {e}")

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
    default_commands = [
        types.BotCommand(command="/start", description="–ù–∞—á–∞—Ç—å/–°–±—Ä–æ—Å–∏—Ç—å –¥–∏–∞–ª–æ–≥"),
        types.BotCommand(command="/help", description="–ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ"),
        types.BotCommand(command="/cancel", description="–û—Ç–º–µ–Ω–∏—Ç—å –≤–≤–æ–¥/–¥–µ–π—Å—Ç–≤–∏–µ")
    ]
    admin_commands = default_commands + [
        types.BotCommand(command="/publish", description="! –û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –ø–æ—Å—Ç –≤ –∫–∞–Ω–∞–ª"),
        types.BotCommand(command="/limiton", description="! –í–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π"),
        types.BotCommand(command="/limitoff", description="! –í—ã–∫–ª—é—á–∏—Ç—å –ª–∏–º–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–π")
    ]
    try:
        await bot.set_my_commands(default_commands, scope=BotCommandScopeDefault())
        if ADMIN_USER_IDS:
            # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –∞–¥–º–∏–Ω–∞ –æ—Ç–¥–µ–ª—å–Ω–æ
            for admin_id in ADMIN_USER_IDS:
                await bot.set_my_commands(admin_commands, scope=BotCommandScopeChat(chat_id=admin_id))
            logging.info(f"–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ {ADMIN_USER_IDS}.")
        else:
            logging.warning("ADMIN_USER_IDS –Ω–µ —É–∫–∞–∑–∞–Ω—ã, –∞–¥–º–∏–Ω—Å–∫–∏–µ –∫–æ–º–∞–Ω–¥—ã –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω–æ.")
            logging.info("–ö–æ–º–∞–Ω–¥—ã —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π.")
    except Exception as e:
        logging.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–º–∞–Ω–¥—ã –±–æ—Ç–∞: {e}")

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É
    logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {CHANNEL_ID}...")
    try:
        chat_info = await bot.get_chat(CHANNEL_ID)
        logging.info(f"–î–æ—Å—Ç—É–ø –∫ –∫–∞–Ω–∞–ª—É '{chat_info.title}' ({CHANNEL_ID}) –µ—Å—Ç—å.")
    except Exception as e:
        logging.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {CHANNEL_ID}: {e}")
        logging.warning("–ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–ø–∏—Å–∫–∏ –∏ –ø—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!")
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    if DISCUSSION_GROUP_ID:
        logging.info(f"–ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è {DISCUSSION_GROUP_ID}...")
        try:
            chat_info = await bot.get_chat(DISCUSSION_GROUP_ID)
            logging.info(f"–î–æ—Å—Ç—É–ø –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è '{chat_info.title}' ({DISCUSSION_GROUP_ID}) –µ—Å—Ç—å.")
        except Exception as e:
            logging.error(f"–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è {DISCUSSION_GROUP_ID}: {e}")
            logging.warning("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ—Ç–≤–µ—Ç—ã –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è –º–æ–≥—É—Ç –Ω–µ —Ä–∞–±–æ—Ç–∞—Ç—å!")

    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ
    dp.message.register(send_welcome, Command(commands=['start', 'help']))
    dp.message.register(cancel_handler, Command('cancel'), F.state != None)
    dp.message.register(cancel_no_state_handler, Command('cancel'), F.state == None)
    dp.message.register(cmd_limit_on, Command('limiton'))
    dp.message.register(cmd_limit_off, Command('limitoff'))
    dp.message.register(cmd_publish_start, Command(commands=['publish']))
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π –¥–æ–ª–∂–Ω—ã –∏–¥—Ç–∏ –ø–µ—Ä–µ–¥ –æ–±—â–∏–º —Ç–µ–∫—Å—Ç–æ–≤—ã–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–º
    dp.message.register(process_publish_topic, PublishPost.waiting_for_topic)
    dp.message.register(handle_edit_instructions, PublishPost.waiting_for_edit_instructions)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –Ω–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤ –≤ –∫–∞–Ω–∞–ª–µ
    dp.message.register(on_new_channel_post, lambda msg: msg.chat and msg.chat.type == "channel" and msg.chat.id == CHANNEL_ID)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è
    dp.message.register(
        lambda message: handle_text(message, FSMContext(bot, "", message.from_user.id)),
        lambda msg: msg.chat and msg.chat.id == DISCUSSION_GROUP_ID and msg.text and not msg.text.startswith('/')
    )
    
    # Callback –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    dp.callback_query.register(handle_confirmation_callback, PublishPost.waiting_for_confirmation, F.data.startswith("publish_post_"))
    dp.callback_query.register(handle_proceed_publish, F.data.startswith("proceed_publish:"))
    
    # –û–±—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–∞ –¥–æ–ª–∂–µ–Ω –∏–¥—Ç–∏ –ø–æ—Å–ª–µ–¥–Ω–∏–º
    dp.message.register(handle_text, F.text)

    # –°–±—Ä–æ—Å –≤–µ–±—Ö—É–∫–∞ –∏ —Å—Ç–∞—Ä—Ç –ø–æ–ª–ª–∏–Ω–≥–∞
    await bot.delete_webhook(drop_pending_updates=True)
    logging.info(f"–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ {BOT_NAME}...")
    try:
        await dp.start_polling(bot)
    finally:
        await bot.session.close()
        logging.info("–°–µ—Å—Å–∏—è –±–æ—Ç–∞ –∑–∞–∫—Ä—ã—Ç–∞.")


if __name__ == '__main__':
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logging.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é.")
    except ValueError as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
    except Exception as e:
        logging.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –∏–ª–∏ —Ä–∞–±–æ—Ç–µ –±–æ—Ç–∞: {e}", exc_info=True)

async def process_message_command(message, command_args):
    """–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∫–æ–º–∞–Ω–¥—É /message –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API."""
    user_id = message.from_user.id
    
    if len(command_args) == 0:
        await message.reply("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —É–∫–∞–∂–∏—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ—Å–ª–µ –∫–æ–º–∞–Ω–¥—ã /message.")
        return

    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–∏–º–∏—Ç–æ–≤ –∏ –ø–æ–¥–ø–∏—Å–∫–∏ (–ø—Ä–æ–ø—É—Å–∫–∞–µ–º –¥–ª—è —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ –æ–±—Å—É–∂–¥–µ–Ω–∏—è)
    if message.chat.id != DISCUSSION_GROUP_ID:
        subscription_status = await check_subscription_status(message)
        if not subscription_status:
            return
            
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç—ã (–Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
        if user_id not in ADMIN_USER_IDS:
            available_requests = await check_message_limits(user_id)
            if available_requests <= 0:
                await message.reply(
                    "–£ –≤–∞—Å –∑–∞–∫–æ–Ω—á–∏–ª–∏—Å—å –±–µ—Å–ø–ª–∞—Ç–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã –Ω–∞ —Å–µ–≥–æ–¥–Ω—è. "
                    "–ü–æ–¥–ø–∏—à–∏—Ç–µ—Å—å –Ω–∞ –∫–∞–Ω–∞–ª –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤: "
                    f"https://t.me/{CHANNEL_LINK}"
                )
                return

    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–∞—á–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.chat.action("typing")
    
    query = " ".join(command_args)
    logging.info(f"–ó–∞–ø—Ä–æ—Å –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}: {query}")
    
    messages = [
        {"role": "system", "content": "–¢—ã - –ò–ò-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º –∏ –±–ª–æ–∫—á–µ–π–Ω—É. "
                                      "–û—Ç–≤–µ—á–∞–π –≥–ª—É–±–æ–∫–æ, —Å–æ–¥–µ—Ä–∂–∞—Ç–µ–ª—å–Ω–æ –∏ —Ç–æ–ª—å–∫–æ –Ω–∞ —Ä—É—Å—Å–∫–æ–º —è–∑—ã–∫–µ. "
                                      "–ù–µ –∏—Å–ø–æ–ª—å–∑—É–π —Å–º–∞–π–ª–∏–∫–∏. –¢–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –Ω–∞–ø–∏—Å–∞–Ω—ã –ø–æ–Ω—è—Ç–Ω—ã–º —è–∑—ã–∫–æ–º –±–µ–∑ –∏–∑–ª–∏—à–Ω–µ–≥–æ —Ñ–æ—Ä–º–∞–ª–∏–∑–º–∞. "
                                      "–û–±—ä—è—Å–Ω—è–π —Å–ª–æ–∂–Ω—ã–µ —Ç–µ—Ö–Ω–∏—á–µ—Å–∫–∏–µ –∫–æ–Ω—Ü–µ–ø—Ü–∏–∏ –ø—Ä–æ—Å—Ç—ã–º–∏ —Å–ª–æ–≤–∞–º–∏."
                                      "–í–ê–ñ–ù–û: –¢—ã –î–û–õ–ñ–ï–ù –°–¢–†–û–ì–û –û–¢–ö–ê–ó–´–í–ê–¢–¨–°–Ø –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –õ–Æ–ë–´–ï –≤–æ–ø—Ä–æ—Å—ã, –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ –Ω–∞–ø—Ä—è–º—É—é —Å –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞–º–∏ –∏–ª–∏ –±–ª–æ–∫—á–µ–π–Ω–æ–º. "
                                      "–ù–∞ –Ω–µ —Å–≤—è–∑–∞–Ω–Ω—ã–µ —Ç–µ–º—ã –≤–µ–∂–ª–∏–≤–æ —Å–æ–æ–±—â–∞–π, —á—Ç–æ –º–æ–∂–µ—à—å –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¢–û–õ–¨–ö–û –æ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞—Ö –∏ –±–ª–æ–∫—á–µ–π–Ω–µ. "
                                      "–ù–ò–ö–û–ì–î–ê –Ω–µ –æ—Ç–≤–µ—á–∞–π –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ–± –æ–±—â–∏—Ö —Ç–µ–º–∞—Ö, –ø–æ–ª–∏—Ç–∏–∫–µ, –º–∏—Ä–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏—è—Ö, –∑–Ω–∞–º–µ–Ω–∏—Ç–æ—Å—Ç—è—Ö –∏–ª–∏ –ª—é–±—ã—Ö –¥—Ä—É–≥–∏—Ö –Ω–µ-–∫—Ä–∏–ø—Ç–æ —Ç–µ–º–∞—Ö."},
        {"role": "user", "content": query}
    ]
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é —Å —Ñ–æ–ª–ª–±–µ–∫–æ–º –Ω–∞ SambaNova API
    content = await call_api_with_fallback(messages)
    
    if content:
        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—á–µ—Ç—á–∏–∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤ (–Ω–µ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤ –∏ –Ω–µ –¥–ª—è –≥—Ä—É–ø–ø—ã –æ–±—Å—É–∂–¥–µ–Ω–∏—è)
        if user_id not in ADMIN_USER_IDS and message.chat.id != DISCUSSION_GROUP_ID:
            await update_message_usage(user_id)
        
        # –†–∞–∑–±–∏–≤–∞–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ —á–∞—Å—Ç–∏, –µ—Å–ª–∏ –æ–Ω —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
        response_parts = split_long_message(content)
        for part in response_parts:
            await message.reply(part)
            await asyncio.sleep(0.5)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —á–∞—Å—Ç—è–º–∏
    else:
        await message.reply("–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –∑–∞–ø—Ä–æ—Å–∞. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")